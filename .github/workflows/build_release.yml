name: RZip automatic build and release

# Manual release with input version number
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Enter the release version (e.g., 0.1.0)"
        required: true

jobs:
  # Linux
  # Build application and upload artifact
  # #####################################
  build-linux:
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v4
      # Install rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
          libarchive-dev \
          javascriptcoregtk-4.0 \
          libsoup2.4-dev \
          webkit2gtk-4.0 \
      # Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      # Install node.js
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      # Install pnpm dependencies for Tauri
      - name: Install Tauri dependencies
        run: |
          cd apps/gui
          pnpm install
          cd ../..
      # Load/initialize cache
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # Cargo test
      - name: Run tests
        run: cargo test --release
      # Cargo build
      - name: Build application
        run: cargo build --release --target x86_64-unknown-linux-gnu
      # Upload Linux build artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rzip-binary-x86_64-unknown-linux-gnu
          path: target/x86_64-unknown-linux-gnu/release/rzip

  # Windows
  # Build application and upload artifact
  # #####################################
  build-windows:
    runs-on: windows-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v4
      # Install rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      # Load/initialize cach
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # Install cargo-vcpkg
      - name: Install cargo-vcpkg
        run: cargo install cargo-vcpkg
      # Build vcpkg for library
      - name: Run vcpkg
        run: |
          cd lib
          cargo vcpkg build
          cd ..
      # Cargo test
      - name: Run tests
        run: cargo test --release
      # Cargo build
      - name: Build application
        run: cargo build --release --target x86_64-pc-windows-msvc
      # Upload Windows build artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rzip-binary-x86_64-pc-windows-msvc
          path: target/x86_64-pc-windows-msvc/release/rzip.exe

  # Download artifact and create release
  # ####################################
  release:
    needs: [build-linux, build-windows]
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          draft: true
          prerelease: false
          release_name: Release ${{ github.event.inputs.version }}
          tag_name: v${{ github.event.inputs.version }}
          body_path: changelog.md

      # Linux release assembly
      - name: Download binary artifact (Linux)
        uses: actions/download-artifact@v4
        with:
          name: rzip-binary-x86_64-unknown-linux-gnu
          path: RZip-linux

      # Windows release assembly
      - name: Download binary artifact (Windows)
        uses: actions/download-artifact@v4
        with:
          name: rzip-binary-x86_64-pc-windows-msvc
          path: RZip-windows

      # Zip Linux and Windows artifacts
      - name: Zip artifacts
        run: |
          sudo apt-get install -y zip
          cd RZip-linux
          zip -r ../linux-build-results.zip *
          cd ../RZip-windows
          zip -r ../windows-build-results.zip *
          cd ..

      # Upload release zips
      # Linux
      - name: Upload release artifact (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux-build-results.zip
          asset_name: RZip-${{ github.event.inputs.version }}-x64-Linux.zip
          asset_content_type: application/zip
      # Windows
      - name: Upload release artifact (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-build-results.zip
          asset_name: RZip-${{ github.event.inputs.version }}-x64-Windows.zip
          asset_content_type: application/zip
